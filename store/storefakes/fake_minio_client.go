// This file was generated by counterfeiter
package storefakes

import (
	"io"
	"sync"

	"github.com/jutkko/copy-pasta/store"
)

type FakeMinioClient struct {
	MakeBucketStub        func(string, string) error
	makeBucketMutex       sync.RWMutex
	makeBucketArgsForCall []struct {
		arg1 string
		arg2 string
	}
	makeBucketReturns struct {
		result1 error
	}
	BucketExistsStub        func(string) (bool, error)
	bucketExistsMutex       sync.RWMutex
	bucketExistsArgsForCall []struct {
		arg1 string
	}
	bucketExistsReturns struct {
		result1 bool
		result2 error
	}
	PutObjectStub        func(string, string, io.Reader, string) (int64, error)
	putObjectMutex       sync.RWMutex
	putObjectArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 io.Reader
		arg4 string
	}
	putObjectReturns struct {
		result1 int64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMinioClient) MakeBucket(arg1 string, arg2 string) error {
	fake.makeBucketMutex.Lock()
	fake.makeBucketArgsForCall = append(fake.makeBucketArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("MakeBucket", []interface{}{arg1, arg2})
	fake.makeBucketMutex.Unlock()
	if fake.MakeBucketStub != nil {
		return fake.MakeBucketStub(arg1, arg2)
	}
	return fake.makeBucketReturns.result1
}

func (fake *FakeMinioClient) MakeBucketCallCount() int {
	fake.makeBucketMutex.RLock()
	defer fake.makeBucketMutex.RUnlock()
	return len(fake.makeBucketArgsForCall)
}

func (fake *FakeMinioClient) MakeBucketArgsForCall(i int) (string, string) {
	fake.makeBucketMutex.RLock()
	defer fake.makeBucketMutex.RUnlock()
	return fake.makeBucketArgsForCall[i].arg1, fake.makeBucketArgsForCall[i].arg2
}

func (fake *FakeMinioClient) MakeBucketReturns(result1 error) {
	fake.MakeBucketStub = nil
	fake.makeBucketReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMinioClient) BucketExists(arg1 string) (bool, error) {
	fake.bucketExistsMutex.Lock()
	fake.bucketExistsArgsForCall = append(fake.bucketExistsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("BucketExists", []interface{}{arg1})
	fake.bucketExistsMutex.Unlock()
	if fake.BucketExistsStub != nil {
		return fake.BucketExistsStub(arg1)
	}
	return fake.bucketExistsReturns.result1, fake.bucketExistsReturns.result2
}

func (fake *FakeMinioClient) BucketExistsCallCount() int {
	fake.bucketExistsMutex.RLock()
	defer fake.bucketExistsMutex.RUnlock()
	return len(fake.bucketExistsArgsForCall)
}

func (fake *FakeMinioClient) BucketExistsArgsForCall(i int) string {
	fake.bucketExistsMutex.RLock()
	defer fake.bucketExistsMutex.RUnlock()
	return fake.bucketExistsArgsForCall[i].arg1
}

func (fake *FakeMinioClient) BucketExistsReturns(result1 bool, result2 error) {
	fake.BucketExistsStub = nil
	fake.bucketExistsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeMinioClient) PutObject(arg1 string, arg2 string, arg3 io.Reader, arg4 string) (int64, error) {
	fake.putObjectMutex.Lock()
	fake.putObjectArgsForCall = append(fake.putObjectArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 io.Reader
		arg4 string
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("PutObject", []interface{}{arg1, arg2, arg3, arg4})
	fake.putObjectMutex.Unlock()
	if fake.PutObjectStub != nil {
		return fake.PutObjectStub(arg1, arg2, arg3, arg4)
	}
	return fake.putObjectReturns.result1, fake.putObjectReturns.result2
}

func (fake *FakeMinioClient) PutObjectCallCount() int {
	fake.putObjectMutex.RLock()
	defer fake.putObjectMutex.RUnlock()
	return len(fake.putObjectArgsForCall)
}

func (fake *FakeMinioClient) PutObjectArgsForCall(i int) (string, string, io.Reader, string) {
	fake.putObjectMutex.RLock()
	defer fake.putObjectMutex.RUnlock()
	return fake.putObjectArgsForCall[i].arg1, fake.putObjectArgsForCall[i].arg2, fake.putObjectArgsForCall[i].arg3, fake.putObjectArgsForCall[i].arg4
}

func (fake *FakeMinioClient) PutObjectReturns(result1 int64, result2 error) {
	fake.PutObjectStub = nil
	fake.putObjectReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeMinioClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.makeBucketMutex.RLock()
	defer fake.makeBucketMutex.RUnlock()
	fake.bucketExistsMutex.RLock()
	defer fake.bucketExistsMutex.RUnlock()
	fake.putObjectMutex.RLock()
	defer fake.putObjectMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeMinioClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ store.MinioClient = new(FakeMinioClient)
